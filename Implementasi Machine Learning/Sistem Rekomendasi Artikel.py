# -*- coding: utf-8 -*-
"""Fix-Recomendation-article.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KehiJ3s5X8wGkKO3_chiHfSuN3hx7t1Q
"""

pip install numpy pandas scikit-learn

"""# Bagian Baru

# Bagian Baru
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

#loading data
article_data = pd.read_csv('/content/hasil_akhir.csv')

article_data.head()

article_click_index = 45  # Assuming article_click_index is set to the first article for demonstration

# TF-IDF Vectorizer
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(article_data['Content'])

# Cosine Similarity Calculation for all articles
cosine_similarities = cosine_similarity(tfidf_matrix, tfidf_matrix[article_click_index]).flatten()

# Create a DataFrame to store the results for all articles
result_df = pd.DataFrame({
    'Indeks': article_data['Indeks'],
    'Headline': article_data['Headline'],
    'Category': article_data['Category'],
    'Date':article_data['Date'],
    'Author':article_data['Author'],
    'Content': article_data['Content'],
    'Image':article_data['Image'],
    'Link':article_data['Link'],
    'Similarity': cosine_similarities
})

# Sort the DataFrame by similarity in descending order
result_df = result_df.sort_values(by='Similarity', ascending=False)

# Exclude the article with article_click_index from the recommendations
result_df = result_df[result_df['Indeks'] != article_click_index+1]

# Display the recommendations with ID, Headline, Content, and Similarity
print("Recommendations Based on Similarity:")
print(result_df[['Indeks', 'Headline','Similarity']])


# -*- coding: utf-8 -*-
"""Salinan dari  Detik-scraping-manajemem-keuangan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jSHfSFq_z0G2rGaDenMcoUkiDsv6RsUm

**Model Fix**
"""

import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional, Dropout, BatchNormalization
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

# Load data from CSV file
df = pd.read_csv('/content/artikel_train-9.csv')

def predict():

  # Tokenization and Padding
  max_words = 1000
  max_len = 300

  tokenizer = Tokenizer(num_words=max_words)
  tokenizer.fit_on_texts(df['Content'])
  sequences = tokenizer.texts_to_sequences(df['Content'])
  X = pad_sequences(sequences, maxlen=max_len)

  # Mapping categories to numeric labels
  label_dict = {label: idx for idx, label in enumerate(df['Category'].unique())}
  df['label'] = df['Category'].map(label_dict)

  # Convert labels to one-hot encoding during training
  y_one_hot = to_categorical(df['label'], num_classes=len(label_dict))

  # Build the model with L2 regularization on LSTM layers and Dense layer
  model = Sequential()
  model.add(Embedding(max_words, 64, input_length=max_len))
  model.add(Dropout(0.5))
  model.add(Bidirectional(LSTM(32, return_sequences=True)))
  model.add(LSTM(128))
  model.add(Dropout(0.5))
  model.add(BatchNormalization())
  model.add(Dense(len(label_dict), activation='softmax'))

  model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

  # Split the data into training and validation sets
  X_train, X_val, y_train, y_val = train_test_split(X, y_one_hot, test_size=0.3, random_state=15)

  # Train the model
  model.fit(X_train, y_train, epochs=35, batch_size=16, validation_data=(X_val, y_val))

  # Evaluate the model
  loss, accuracy = model.evaluate(X_val, y_val)
  print(f'Validation Loss: {loss}, Accuracy: {accuracy}')

  return model

if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    model = predict()
    model.summary
    model.save("model_71.h5")

model.summary()

"""**Implementasi**"""

import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional, Dropout, BatchNormalization
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

df=pd.read_csv('/content/artikel_train-10.csv')
a=1
def predict_category(input_texts, max_words=1000, max_len=300, model_path='/content/model_71.h5', label_dict=None):
    # Load the pre-trained model
    loaded_model = load_model(model_path)

    # Tokenization and Padding
    tokenizer = Tokenizer()
    tokenizer.fit_on_texts([input_texts])
    sequences = tokenizer.texts_to_sequences([input_texts])
    X = pad_sequences(sequences, maxlen=max_len)

    # Predict using the loaded model
    prediction = loaded_model.predict(X)
    print('data ke-:',a)
    a=a+1

    # Convert predictions to labels
    predicted_label_idx = tf.argmax(prediction, axis=1).numpy()[0]
    predicted_label = list(label_dict.keys())[predicted_label_idx]

    return predicted_label

# Example usage:
label_dict = {'Asuransi': 0, 'Perbankan': 1, 'Korporasi': 2, 'Bursa&Saham': 3, 'Bisnis': 4, 'Berita': 5, 'Obligasi&Reksadana': 6, 'PersonalFinance': 7, 'Fintech': 8, 'Ekonomi': 9, 'Multifinance': 10, 'Manajemen': 11, 'Infrastruktur': 12, 'Trade': 13}

# Assuming you want to add the prediction for each row in the 'Content' column
df['Predicted_Category'] = df['Content'].apply(lambda x: predict_category(x, label_dict=label_dict))

# Save the DataFrame to a new CSV file with header 'Category'
df.to_csv('/content/artikel_train-10_with_predictions.csv', index=False, columns=['Category', 'Predicted_Category'])

import pandas as pd

# Load DataFrame A
df_A = pd.read_csv('/content/artikel_train-10.csv')

df['Category'] = df['Predicted_Category']

# Menambahkan kolom 'Predicted_Category' ke DataFrame A
df_A = pd.merge(df_A, df[['Category']], left_index=True, right_index=True)  # Ganti 'Predicted_Category' dengan nama kolom yang sesuai

# Menyimpan DataFrame A dengan kolom baru ke file CSV baru
df_A.to_csv('/content/hasil_akhir.csv', index=False)